//
//  OIKeyboardEvent.h
//  Ohai
//
//  Created by âˆž on 14/11/09.
//  Copyright 2009 __MyCompanyName__. All rights reserved.
//

/**
\file
This file contains the OIKeyboardEvent class, which is used to encapsulate a single key-down or key-up event.
*/

#import <Foundation/Foundation.h>

/** \addtogroup OIKey Key constants.

These constants will be the values of the OIKeyboardEvent::key and OIKeyboardEvent::intendedKey properties.
*/
/*@{*/

extern NSString* const OIKeyPowerToggle; /**< The name of the power-on key of the device. */

extern NSString* const OIKeyUpArrow; /**< The up arrow in a 4-way directional pad. */
extern NSString* const OIKeyDownArrow; /**< The down arrow in a 4-way directional pad. */
extern NSString* const OIKeyLeftArrow; /**< The left arrow in a 4-way directional pad. */
extern NSString* const OIKeyRightArrow; /**< The right arrow in a 4-way directional pad. */

extern NSString* const OIKeyNumber0; /**< The button labeled 0 in a numeric input pad. */
extern NSString* const OIKeyNumber1; /**< The button labeled 1 in a numeric input pad. */
extern NSString* const OIKeyNumber2; /**< The button labeled 2 in a numeric input pad. */
extern NSString* const OIKeyNumber3; /**< The button labeled 3 in a numeric input pad. */
extern NSString* const OIKeyNumber4; /**< The button labeled 4 in a numeric input pad. */
extern NSString* const OIKeyNumber5; /**< The button labeled 5 in a numeric input pad. */
extern NSString* const OIKeyNumber6; /**< The button labeled 6 in a numeric input pad. */
extern NSString* const OIKeyNumber7; /**< The button labeled 7 in a numeric input pad. */
extern NSString* const OIKeyNumber8; /**< The button labeled 8 in a numeric input pad. */
extern NSString* const OIKeyNumber9; /**< The button labeled 9 in a numeric input pad. */

extern NSString* const OIKeyEscape;  /**< The back or "C" button. */
extern NSString* const OIKeyReturn; /**< The OK button. */

extern NSString* const OIKeyIncrease; /**< A button labeled '+', usually reserved for audio volume adjustment. */
extern NSString* const OIKeyDecrease; /**< A button labeled '-', usually reserved for audio volume adjustment. */

extern NSString* const OIKeySpace; /**< The space bar. Used as a "Bookmark" button on the N516. */

extern NSString* const OIKeyNext; /**< A button that is used to scroll forward into a set of choices or into text. Generated by the N516 scroll wheel. */
extern NSString* const OIKeyPrevious; /**< A button that is used to scroll backwards into a set of choices or into text. Generated by the N516 scroll wheel. */

extern NSString* const OIKeyRotateScreen; /**< A button on the N516 used to indicate that the screen must be rotated. */
extern NSString* const OIKeySearch; /**< A button on the N516 used to invoke search in the current context. */
extern NSString* const OIKeyPlayPause; /**< A button on the N516 that is used to start or stop audio playback. */

/*@}*/


/**
Encapsulates details about a keyboard event.
*/
@interface OIKeyboardEvent : NSObject {
	id sender;
	NSString* key, * intendedKey, * inputString, * provisionalInputString;
	BOOL held;
}

/**
Produces a new keyboard events object. You won't usually invoke this method, since most of the time you'll interact with instances of this class created by the event subsystem rather than make your own.
*/
- initWithSender:(id) se key:(NSString*) k intendedKey:(NSString*) i inputString:(NSString*) s provisionalInputString:(NSString*) p held:(BOOL) held;

/**
The object that first received this event. Usually a UIView. May be nil.
*/
@property(readonly, retain) id sender;

/**
The name of the key that was pressed. Can be compared with one of the key constants.
*/
@property(readonly, copy) NSString* key;

/**
The key the user intended to press. This may not be exactly the same as the key returned by OIKeyboardEvent::key if the key was produced using modifiers. For example, the user may be pressing Shift + 1 to select the key labeled '!'. In this case, the key will be "1", but the intended key will be "!".
*/
@property(readonly, copy) NSString* intendedKey;

/**
The string that should be appended to a text box or other means of text input as a result of pressing this key.
*/
@property(readonly, copy) NSString* inputString;

/**
A string that indicates a provisional (uncommitted) text as a hint for the user. For example, in some keyboard maps, hitting the "`" key will cause the character corresponding to the next key press to be inserted accented.
*/
@property(readonly, copy) NSString* provisionalInputString;

/**
Whether the user held this key pressed (YES) or pressed it momentarily (NO).
*/
@property(readonly, getter=isHeld) BOOL held;

@end
